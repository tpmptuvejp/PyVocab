{
    "print": "The print function outputs text or variables to the console. Example: print(\"Hello, World!\")",
    "print_example": "print(\"Hello, Python!\")",
    "for": "A for loop iterates over a sequence (like a list, tuple, string, or range). Example:\nfor i in range(5):\n    print(i)",
    "for_example": "for i in range(5):\n    print(i)",
    "while": "A while loop continues to execute as long as a condition is true. Example:\nwhile condition:\n    # do something",
    "while_example": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1",
    "if": "An if statement executes code based on a condition. Example:\nif condition:\n    # do something",
    "if_example": "x = 6\nif x > 5:\n    print(\"Yes\")",
    "variables": "Variables store values. You can create a variable by assigning a value to a name. Example:\nx = 5\nname = \"Alice\"",
    "variables_example": "x = 5\nname = \"Alice\"\nprint(x)\nprint(name)",
    "lists": "Lists store multiple items in a single variable. Lists are created using square brackets. Example:\nmy_list = [1, 2, 3, 4, 5]\nprint(my_list)",
    "lists_example": "my_list = [1, 2, 3, 4, 5]\nfor item in my_list:\n    print(item)",
    "functions": "Functions are blocks of code that only run when called. You can pass data to functions, and they can return data as a result. Example:\ndef my_function():\n    print(\"Hello from a function\")\nmy_function()",
    "functions_example": "def my_function():\n    print(\"Hello from a function\")\nmy_function()",
    "strings": "Strings are sequences of characters, enclosed in quotes. You can use single, double, or triple quotes. Example:\nmy_string = \"Hello, World!\"\nprint(my_string)",
    "strings_example": "my_string = \"Hello, World!\"\nprint(my_string)",
    "dictionaries": "Dictionaries store data values in key:value pairs. Example:\nmy_dict = {\"name\": \"Alice\", \"age\": 25}\nprint(my_dict[\"name\"])",
    "dictionaries_example": "my_dict = {\"name\": \"Alice\", \"age\": 25}\nprint(my_dict[\"name\"])\nprint(my_dict[\"age\"])",
    "tuples": "Tuples are like lists, but they are immutable (cannot be changed). Tuples are created using parentheses. Example:\nmy_tuple = (1, 2, 3)\nprint(my_tuple)",
    "tuples_example": "my_tuple = (1, 2, 3)\nprint(my_tuple)",
    "sets": "Sets are collections of unique items. They are unordered and unindexed. Example:\nmy_set = {1, 2, 3, 3}\nprint(my_set)",
    "sets_example": "my_set = {1, 2, 3, 3}\nprint(my_set)",
    "input": "The input function allows user input. The input is always a string. Example:\nname = input(\"Enter your name: \")\nprint(\"Hello, \" + name)",
    "input_example": "name = input(\"Enter your name: \")\nprint(\"Hello, \" + name)",
    "comments": "Comments are notes for the programmer and are ignored by the Python interpreter. Single-line comments start with #, multi-line comments are enclosed in triple quotes. Example:\n# This is a single-line comment\n\"\"\"\nThis is a\nmulti-line comment\n\"\"\"",
    "comments_example": "# This is a single-line comment\n\"\"\"\nThis is a\nmulti-line comment\n\"\"\"",
    "operators": "Operators are used to perform operations on variables and values. Example:\naddition: +\nsubtraction: -\nmultiplication: *\ndivision: /",
    "operators_example": "a = 10\nb = 5\nprint(a + b)\nprint(a - b)\nprint(a * b)\nprint(a / b)",
    "import": "The import statement is used to include the definitions from a module into the current namespace. Example:\nimport math\nprint(math.sqrt(16))",
    "import_example": "import math\nprint(math.sqrt(16))"
}