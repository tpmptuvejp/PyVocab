{
    "print": "The print function outputs text or variables to the console.",
    "print_example": "print(\"Hello, Python!\")",
    "input": "The input function allows user input. The input is always a string.",
    "input_example": "name = input(\"Enter your name: \")\nprint(\"Hello, \" + name)",
    "len": "The len function returns the number of items in an object.",
    "len_example": "my_list = [1, 2, 3, 4, 5]\nprint(len(my_list))",
    "type": "The type function returns the type of an object.",
    "type_example": "x = 5\nprint(type(x))",
    "int": "The int function converts a value to an integer.",
    "int_example": "x = \"5\"\nprint(int(x))",
    "float": "The float function converts a value to a floating-point number.",
    "float_example": "x = \"5.5\"\nprint(float(x))",
    "str": "The str function converts a value to a string.",
    "str_example": "x = 5\nprint(str(x))",
    "list": "The list function creates a list.",
    "list_example": "my_list = list((1, 2, 3))\nprint(my_list)",
    "dict": "The dict function creates a dictionary.",
    "dict_example": "my_dict = dict(name=\"Alice\", age=25)\nprint(my_dict)",
    "set": "The set function creates a set.",
    "set_example": "my_set = set([1, 2, 3, 3])\nprint(my_set)",
    "tuple": "The tuple function creates a tuple.",
    "tuple_example": "my_tuple = tuple((1, 2, 3))\nprint(my_tuple)",
    "bool": "The bool function converts a value to a boolean.",
    "bool_example": "x = 0\nprint(bool(x))",
    "abs": "The abs function returns the absolute value of a number.",
    "abs_example": "x = -5\nprint(abs(x))",
    "max": "The max function returns the largest item in an iterable or the largest of two or more arguments.",
    "max_example": "my_list = [1, 2, 3, 4, 5]\nprint(max(my_list))",
    "min": "The min function returns the smallest item in an iterable or the smallest of two or more arguments.",
    "min_example": "my_list = [1, 2, 3, 4, 5]\nprint(min(my_list))",
    "sum": "The sum function returns the sum of all items in an iterable.",
    "sum_example": "my_list = [1, 2, 3, 4, 5]\nprint(sum(my_list))",
    "round": "The round function returns a floating-point number rounded to a specified number of decimals.",
    "round_example": "x = 5.567\nprint(round(x, 2))",
    "range": "The range function generates a sequence of numbers.",
    "range_example": "for i in range(5):\n    print(i)",
    "open": "The open function opens a file and returns a file object.",
    "open_example": "with open(\"file.txt\", \"r\") as file:\n    contents = file.read()\n    print(contents)",
    "help": "The help function invokes the built-in help system.",
    "help_example": "help(print)",
    "dir": "The dir function returns a list of valid attributes of the object.",
    "dir_example": "print(dir(list))",
    "map": "The map function applies a given function to all items in an iterable.",
    "map_example": "def square(x):\n    return x * x\nnumbers = [1, 2, 3, 4]\nsquared = map(square, numbers)\nprint(list(squared))",
    "filter": "The filter function constructs an iterator from elements of an iterable for which a function returns true.",
    "filter_example": "def is_even(x):\n    return x % 2 == 0\nnumbers = [1, 2, 3, 4]\neven_numbers = filter(is_even, numbers)\nprint(list(even_numbers))",
    "reduce": "The reduce function applies a rolling computation to sequential pairs of values in an iterable (requires functools module).",
    "reduce_example": "from functools import reduce\ndef add(x, y):\n    return x + y\nnumbers = [1, 2, 3, 4]\nsum = reduce(add, numbers)\nprint(sum)",
    "zip": "The zip function returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.",
    "zip_example": "names = [\"Alice\", \"Bob\", \"Charlie\"]\nages = [25, 30, 35]\ncombined = zip(names, ages)\nprint(list(combined))",
    "enumerate": "The enumerate function adds a counter to an iterable and returns it in the form of an enumerate object.",
    "enumerate_example": "my_list = [\"a\", \"b\", \"c\"]\nfor index, value in enumerate(my_list):\n    print(index, value)",
    "all": "The all function returns True if all elements of the iterable are true (or if the iterable is empty).",
    "all_example": "my_list = [True, True, True]\nprint(all(my_list))",
    "any": "The any function returns True if any element of the iterable is true. If the iterable is empty, return False.",
    "any_example": "my_list = [False, True, False]\nprint(any(my_list))",
    "eval": "The eval function parses the expression passed to this function and runs python expression (code) within the program.",
    "eval_example": "x = 1\ny = 2\nprint(eval('x + y'))",
    "exec": "The exec function supports dynamic execution of Python code.",
    "exec_example": "code = 'a = 5\\nb = 10\\nprint(a + b)'\nexec(code)",
    "format": "The format function formats a specified value into a specified format.",
    "format_example": "x = 5\nprint(\"{} is a number\".format(x))",
    "globals": "The globals function returns a dictionary representing the current global symbol table.",
    "globals_example": "print(globals())",
    "locals": "The locals function updates and returns a dictionary representing the current local symbol table.",
    "locals_example": "def my_function():\n    local_var = 5\n    print(locals())\nmy_function()",
    "isinstance": "The isinstance function returns True if the specified object is of the specified type, otherwise False.",
    "isinstance_example": "x = 5\nprint(isinstance(x, int))",
    "issubclass": "The issubclass function returns True if the specified class is a subclass of the specified class info, otherwise False.",
    "issubclass_example": "class A:\n    pass\nclass B(A):\n    pass\nprint(issubclass(B, A))",
    "iter": "The iter function returns an iterator object.",
    "iter_example": "my_list = [1, 2, 3]\niterator = iter(my_list)\nprint(next(iterator))",
    "next": "The next function retrieves the next item from an iterator.",
    "next_example": "my_list = [1, 2, 3]\niterator = iter(my_list)\nprint(next(iterator))",
    "reversed": "The reversed function returns a reversed iterator.",
    "reversed_example": "my_list = [1, 2, 3]\nprint(list(reversed(my_list)))",
    "slice": "The slice function returns a slice object representing the set of indices specified by range(start, stop, step).",
    "slice_example": "my_list = [1, 2, 3, 4, 5]\nsliced = slice(1, 3)\nprint(my_list[sliced])",
    "chr": "The chr function returns the string representing a character whose Unicode code point is the integer i.",
    "chr_example": "print(chr(65))",
    "ord": "The ord function returns an integer representing the Unicode code point of the given Unicode character.",
    "ord_example": "print(ord('A'))",
    "bin": "The bin function returns the binary representation of a number.",
    "bin_example": "x = 10\nprint(bin(x))",
    "hex": "The hex function converts an integer number to a lowercase hexadecimal string prefixed with '0x'.",
    "hex_example": "x = 255\nprint(hex(x))",
    "oct": "The oct function converts an integer to an octal string.",
    "oct_example": "x = 8\nprint(oct(x))",
    "def": "The def keyword is used to define a function.",
    "def_example": "def greet(name):\n    return \"Hello, \" + name",
    "return": "The return statement exits a function and optionally passes back an expression to the caller.",
    "return_example": "def add(a, b):\n    return a + b\nresult = add(5, 3)\nprint(result)",
    "append": "The append method adds an element to the end of a list.",
    "append_example": "my_list = [1, 2, 3]\nmy_list.append(4)\nprint(my_list)",
    "pop": "The pop method removes and returns the element at the specified position in a list.",
    "pop_example": "my_list = [1, 2, 3]\nelement = my_list.pop(1)\nprint(element)\nprint(my_list)",
    "sort": "The sort method sorts the items of a list in place.",
    "sort_example": "my_list = [3, 1, 4, 2]\nmy_list.sort()\nprint(my_list)",
    "sorted": "The sorted function returns a new sorted list from the elements of any iterable.",
    "sorted_example": "my_list = [3, 1, 4, 2]\nsorted_list = sorted(my_list)\nprint(sorted_list)",
    "join": "The join method concatenates a list or any iterable into a string with a specified separator.",
    "join_example": "words = [\"Hello\", \"world\"]\nsentence = \" \".join(words)\nprint(sentence)",
    "split": "The split method splits a string into a list where each word is a list item.",
    "split_example": "sentence = \"Hello world\"\nwords = sentence.split()\nprint(words)",
    "upper": "The upper method converts a string to uppercase.",
    "upper_example": "text = \"hello\"\nprint(text.upper())",
    "lower": "The lower method converts a string to lowercase.",
    "lower_example": "text = \"HELLO\"\nprint(text.lower())",
    "strip": "The strip method removes any leading and trailing characters (space is the default).",
    "strip_example": "text = \"   hello   \"\nprint(text.strip())"
}